resource() {
  source ${HOME}/.zshrc
}

fin() {
  if [ $? -eq 0 ]; then
    say "Task completed successfully"
    open -g raycast://confetti
  else
    say "Task failed"
    open -g raycast://confetti
  fi
}

gu() {
  branch="$1"
  git checkout "$branch"
  git pull
  git checkout -
}

gch() {
 git checkout "$(git branch | fzf | tr -d '[:space:]')"
}

function gs() {
  selected=$( (git diff --name-only --diff-filter=ACDMRTUXB ; git ls-files --others --exclude-standard ; git diff --name-only --diff-filter=D) | fzf --multi )
  if [ -n "$selected" ]; then
    git add $(echo $selected | xargs)
  fi
}

function t {
  mkdir -p $(dirname $1)
  touch $1
}

function grecent() {
    local branches branch
    branches=$(git branch --sort=-committerdate --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]') \
    && branch=$(echo "$branches" | fzf --ansi) \
    && branch=$(echo "$branch" | awk '{print $1}' | tr -d '*') \
    && git checkout "$branch"
}

function newpost() {
  echo '---\n{\n  "title": "",\n  "description": ""\n}\n---\n' >> src/content/blog/new-post.md
}

function ub() {
    branch=$1
    git checkout $branch && git pull && git checkout -
}

function commit() {
# This script is used to write a conventional commit message.
# It prompts the user to choose the type of commit as specified in the
# conventional commit spec. And then prompts for the summary and detailed
# description of the message and uses the values provided. as the summary and
# details of the message.
#
# If you want to add a simpler version of this script to your dotfiles, use:
#
# alias gcm='git commit -m "$(gum input)" -m "$(gum write)"'

# if [ -z "$(git status -s -uno | grep -v '^ ' | awk '{print $2}')" ]; then
#     gum confirm "Stage all?" && git add .
# fi

  TYPE=$(gum choose "fix" "feat" "docs" "style" "refactor" "test" "chore" "revert")
  SCOPE=$(gum input --placeholder "scope")

# Since the scope is optional, wrap it in parentheses if it has a value.
  test -n "$SCOPE" && SCOPE="($SCOPE)"

# Pre-populate the input with the type(scope): so that the user may change it
  SUMMARY=$(gum input --value "$TYPE$SCOPE: " --placeholder "Summary of this change")
  DESCRIPTION=$(gum write --placeholder "Details of this change")

# Commit these changes if user confirms
  gum confirm "Commit changes?" && git commit -m "$SUMMARY" -m "$DESCRIPTION"
}
